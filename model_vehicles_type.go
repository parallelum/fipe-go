/*
Fipe API

API de Consulta Tabela FIPE fornece pre√ßos m√©dios de ve√≠culos no mercado nacional. Atualizada mensalmente com dados extraidos da tabela FIPE.    Essa API Fipe utiliza banco de dados pr√≥prio, onde todas as requisi√ß√µes acontecem internamente, sem sobrecarregar o Web Service da Fipe, evitando assim bloqueios por m√∫ltiplos acessos.    A API est√° online desde 2015 e totalmente gratu√≠ta. Gostaria que ele continuasse gratu√≠ta? O que acha de me pagar uma cerveja? üç∫    [![Make a donation](https://www.paypalobjects.com/pt_BR/BR/i/btn/btn_donateCC_LG.gif)](https://www.paypal.com/cgi-bin/webscr?cmd=_s-xclick&hosted_button_id=QUPMYWH6XAC5G)   ## Available SDKs  * [Fipe Go SDK](https://pkg.go.dev/github.com/parallelum/fipe-go)  * [Fipe .NetCore Nuget SDK](https://www.nuget.org/packages/Br.Com.Parallelum.Fipe/)  * [Fipe Javascript SDK](https://github.com/deividfortuna/fipe-promise)  

API version: 2.0.0
Contact: deividfortuna@gmail.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fipe

import (
	"encoding/json"
	"fmt"
)

// VehiclesType the model 'VehiclesType'
type VehiclesType string

// List of VehiclesType
const (
	CARS VehiclesType = "cars"
	MOTORCYCLES VehiclesType = "motorcycles"
	TRUCKS VehiclesType = "trucks"
)

var allowedVehiclesTypeEnumValues = []VehiclesType{
	"cars",
	"motorcycles",
	"trucks",
}

func (v *VehiclesType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := VehiclesType(value)
	for _, existing := range allowedVehiclesTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid VehiclesType", value)
}

// NewVehiclesTypeFromValue returns a pointer to a valid VehiclesType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewVehiclesTypeFromValue(v string) (*VehiclesType, error) {
	ev := VehiclesType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for VehiclesType: valid values are %v", v, allowedVehiclesTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v VehiclesType) IsValid() bool {
	for _, existing := range allowedVehiclesTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to VehiclesType value
func (v VehiclesType) Ptr() *VehiclesType {
	return &v
}

type NullableVehiclesType struct {
	value *VehiclesType
	isSet bool
}

func (v NullableVehiclesType) Get() *VehiclesType {
	return v.value
}

func (v *NullableVehiclesType) Set(val *VehiclesType) {
	v.value = val
	v.isSet = true
}

func (v NullableVehiclesType) IsSet() bool {
	return v.isSet
}

func (v *NullableVehiclesType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVehiclesType(val *VehiclesType) *NullableVehiclesType {
	return &NullableVehiclesType{value: val, isSet: true}
}

func (v NullableVehiclesType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVehiclesType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

