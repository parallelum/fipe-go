/*
Fipe API

Testing FipeApiService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package fipe

import (
	"context"
	"testing"

	"github.com/parallelum/fipe-go"

	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
)

func Test_fipe_FipeApiService(t *testing.T) {

	configuration := fipe.NewConfiguration()
	apiClient := fipe.NewAPIClient(configuration)

	t.Run("Test FipeApiService GetBrandsByType", func(t *testing.T) {
		var vehicleType fipe.VehiclesType = fipe.CARS

		resp, httpRes, err := apiClient.FipeApi.GetBrandsByType(context.Background(), vehicleType).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test FipeApiService GetFipeInfo", func(t *testing.T) {
		var vehicleType fipe.VehiclesType = fipe.CARS
		var brandId int32 = 23
		var modelId int32 = 1051
		var yearId string = "1999-1"

		resp, httpRes, err := apiClient.FipeApi.GetFipeInfo(context.Background(), vehicleType, brandId, modelId, yearId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test FipeApiService GetHistoryByFipeCode", func(t *testing.T) {
		var vehicleType fipe.VehiclesType = fipe.CARS
		var fipeCode string = "004519-5"
		var yearId string = "2023-1"

		resp, httpRes, err := apiClient.FipeApi.GetHistoryByFipeCode(context.Background(), vehicleType, fipeCode, yearId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test FipeApiService GetInfoByFipeCode", func(t *testing.T) {
		var vehicleType fipe.VehiclesType = fipe.CARS
		var fipeCode string = "004080-0"
		var yearId string = "1999-1"

		resp, httpRes, err := apiClient.FipeApi.GetInfoByFipeCode(context.Background(), vehicleType, fipeCode, yearId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test FipeApiService GetModelsByBrand", func(t *testing.T) {
		var vehicleType fipe.VehiclesType = fipe.CARS
		var brandId int32 = 23

		resp, httpRes, err := apiClient.FipeApi.GetModelsByBrand(context.Background(), vehicleType, brandId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test FipeApiService GetReferences", func(t *testing.T) {
		resp, httpRes, err := apiClient.FipeApi.GetReferences(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test FipeApiService GetYearByModel", func(t *testing.T) {
		var vehicleType fipe.VehiclesType = fipe.CARS
		var brandId int32 = 23
		var modelId int32 = 1051

		resp, httpRes, err := apiClient.FipeApi.GetYearByModel(context.Background(), vehicleType, brandId, modelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test FipeApiService GetYearsByFipeCode", func(t *testing.T) {
		var vehicleType fipe.VehiclesType = fipe.CARS
		var fipeCode string = "004080-0"

		resp, httpRes, err := apiClient.FipeApi.GetYearsByFipeCode(context.Background(), vehicleType, fipeCode).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
