/*
Fipe API

API de Consulta Tabela FIPE fornece preços médios de veículos no mercado nacional. Atualizada mensalmente com dados extraidos da tabela FIPE

API version: 2.0.0
Contact: deividfortuna@gmail.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fipe

import (
	"bytes"
	_context "context"
	_ioutil "io/ioutil"
	_nethttp "net/http"
	_neturl "net/url"
	"strings"
)

// Linger please
var (
	_ _context.Context
)

// FipeApiService FipeApi service
type FipeApiService service

type ApiGetBrandsByTypeRequest struct {
	ctx _context.Context
	ApiService *FipeApiService
	vehicleType VehiclesType
}


func (r ApiGetBrandsByTypeRequest) Execute() ([]NamedCode, *_nethttp.Response, error) {
	return r.ApiService.GetBrandsByTypeExecute(r)
}

/*
GetBrandsByType Brands by type

Returns brands for the type of vehicle

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param vehicleType Type of vehicle
 @return ApiGetBrandsByTypeRequest
*/
func (a *FipeApiService) GetBrandsByType(ctx _context.Context, vehicleType VehiclesType) ApiGetBrandsByTypeRequest {
	return ApiGetBrandsByTypeRequest{
		ApiService: a,
		ctx: ctx,
		vehicleType: vehicleType,
	}
}

// Execute executes the request
//  @return []NamedCode
func (a *FipeApiService) GetBrandsByTypeExecute(r ApiGetBrandsByTypeRequest) ([]NamedCode, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  []NamedCode
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "FipeApiService.GetBrandsByType")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/{vehicleType}/brands"
	localVarPath = strings.Replace(localVarPath, "{"+"vehicleType"+"}", _neturl.PathEscape(parameterToString(r.vehicleType, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetFipeInfoRequest struct {
	ctx _context.Context
	ApiService *FipeApiService
	vehicleType VehiclesType
	brandId int32
	modelId int32
	yearId string
	reference *int32
}

// Month reference code
func (r ApiGetFipeInfoRequest) Reference(reference int32) ApiGetFipeInfoRequest {
	r.reference = &reference
	return r
}

func (r ApiGetFipeInfoRequest) Execute() (FipeResult, *_nethttp.Response, error) {
	return r.ApiService.GetFipeInfoExecute(r)
}

/*
GetFipeInfo Fipe info

Returns the Fipe information for the vehicle (price estimation)

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param vehicleType Type of vehicle
 @param brandId Brand of the vehicle
 @param modelId Model of the vehicle
 @param yearId Year for the vehicle
 @return ApiGetFipeInfoRequest
*/
func (a *FipeApiService) GetFipeInfo(ctx _context.Context, vehicleType VehiclesType, brandId int32, modelId int32, yearId string) ApiGetFipeInfoRequest {
	return ApiGetFipeInfoRequest{
		ApiService: a,
		ctx: ctx,
		vehicleType: vehicleType,
		brandId: brandId,
		modelId: modelId,
		yearId: yearId,
	}
}

// Execute executes the request
//  @return FipeResult
func (a *FipeApiService) GetFipeInfoExecute(r ApiGetFipeInfoRequest) (FipeResult, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  FipeResult
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "FipeApiService.GetFipeInfo")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/{vehicleType}/brands/{brandId}/models/{modelId}/years/{yearId}"
	localVarPath = strings.Replace(localVarPath, "{"+"vehicleType"+"}", _neturl.PathEscape(parameterToString(r.vehicleType, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"brandId"+"}", _neturl.PathEscape(parameterToString(r.brandId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"modelId"+"}", _neturl.PathEscape(parameterToString(r.modelId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"yearId"+"}", _neturl.PathEscape(parameterToString(r.yearId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.reference != nil {
		localVarQueryParams.Add("reference", parameterToString(*r.reference, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetModelsByBrandRequest struct {
	ctx _context.Context
	ApiService *FipeApiService
	vehicleType VehiclesType
	brandId int32
}


func (r ApiGetModelsByBrandRequest) Execute() ([]NamedCode, *_nethttp.Response, error) {
	return r.ApiService.GetModelsByBrandExecute(r)
}

/*
GetModelsByBrand Models by brand

Returns models for the brand

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param vehicleType Type of vehicle
 @param brandId Brand of the vehicle
 @return ApiGetModelsByBrandRequest
*/
func (a *FipeApiService) GetModelsByBrand(ctx _context.Context, vehicleType VehiclesType, brandId int32) ApiGetModelsByBrandRequest {
	return ApiGetModelsByBrandRequest{
		ApiService: a,
		ctx: ctx,
		vehicleType: vehicleType,
		brandId: brandId,
	}
}

// Execute executes the request
//  @return []NamedCode
func (a *FipeApiService) GetModelsByBrandExecute(r ApiGetModelsByBrandRequest) ([]NamedCode, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  []NamedCode
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "FipeApiService.GetModelsByBrand")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/{vehicleType}/brands/{brandId}/models"
	localVarPath = strings.Replace(localVarPath, "{"+"vehicleType"+"}", _neturl.PathEscape(parameterToString(r.vehicleType, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"brandId"+"}", _neturl.PathEscape(parameterToString(r.brandId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetReferencesRequest struct {
	ctx _context.Context
	ApiService *FipeApiService
}


func (r ApiGetReferencesRequest) Execute() ([]Reference, *_nethttp.Response, error) {
	return r.ApiService.GetReferencesExecute(r)
}

/*
GetReferences Fipe month references

Returns months and codes reference from Fipe

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetReferencesRequest
*/
func (a *FipeApiService) GetReferences(ctx _context.Context) ApiGetReferencesRequest {
	return ApiGetReferencesRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []Reference
func (a *FipeApiService) GetReferencesExecute(r ApiGetReferencesRequest) ([]Reference, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  []Reference
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "FipeApiService.GetReferences")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/references"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetYearByModelRequest struct {
	ctx _context.Context
	ApiService *FipeApiService
	vehicleType VehiclesType
	brandId int32
	modelId int32
}


func (r ApiGetYearByModelRequest) Execute() ([]NamedCode, *_nethttp.Response, error) {
	return r.ApiService.GetYearByModelExecute(r)
}

/*
GetYearByModel Years for model

Returns years for the specific model

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param vehicleType Type of vehicle
 @param brandId Brand of the vehicle
 @param modelId Model of the vehicle
 @return ApiGetYearByModelRequest
*/
func (a *FipeApiService) GetYearByModel(ctx _context.Context, vehicleType VehiclesType, brandId int32, modelId int32) ApiGetYearByModelRequest {
	return ApiGetYearByModelRequest{
		ApiService: a,
		ctx: ctx,
		vehicleType: vehicleType,
		brandId: brandId,
		modelId: modelId,
	}
}

// Execute executes the request
//  @return []NamedCode
func (a *FipeApiService) GetYearByModelExecute(r ApiGetYearByModelRequest) ([]NamedCode, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  []NamedCode
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "FipeApiService.GetYearByModel")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/{vehicleType}/brands/{brandId}/models/{modelId}/years"
	localVarPath = strings.Replace(localVarPath, "{"+"vehicleType"+"}", _neturl.PathEscape(parameterToString(r.vehicleType, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"brandId"+"}", _neturl.PathEscape(parameterToString(r.brandId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"modelId"+"}", _neturl.PathEscape(parameterToString(r.modelId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
