/*
Fipe API

API de Consulta Tabela FIPE fornece pre√ßos m√©dios de ve√≠culos no mercado nacional. Atualizada mensalmente com dados extraidos da tabela FIPE.    Essa API Fipe utiliza banco de dados pr√≥prio, onde todas as requisi√ß√µes acontecem internamente, sem sobrecarregar o Web Service da Fipe, evitando assim bloqueios por m√∫ltiplos acessos.    A API est√° online desde 2015 e totalmente gratu√≠ta. Gostaria que ele continuasse gratu√≠ta? O que acha de me pagar uma cerveja? üç∫    [![Make a donation](https://www.paypalobjects.com/pt_BR/BR/i/btn/btn_donateCC_LG.gif)](https://www.paypal.com/cgi-bin/webscr?cmd=_s-xclick&hosted_button_id=QUPMYWH6XAC5G)   ## Available SDKs  * [Fipe Go SDK](https://pkg.go.dev/github.com/parallelum/fipe-go)  * [Fipe .NetCore Nuget SDK](https://www.nuget.org/packages/Br.Com.Parallelum.Fipe/)  * [Fipe Javascript SDK](https://github.com/deividfortuna/fipe-promise)  

API version: 2.0.0
Contact: deividfortuna@gmail.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fipe

import (
	"encoding/json"
)

// FipeResult struct for FipeResult
type FipeResult struct {
	// Price in Brazilian Real
	Price *string `json:"price,omitempty"`
	// Brand of the vehicle
	Brand *string `json:"brand,omitempty"`
	// Model of the vehicle
	Model *string `json:"model,omitempty"`
	// Year of vehicle production
	ModelYear *int32 `json:"modelYear,omitempty"`
	// Fuel used by the vehicle
	Fuel *string `json:"fuel,omitempty"`
	// Unique Fipe identifier
	CodeFipe *string `json:"codeFipe,omitempty"`
	// Month of the price
	ReferenceMonth *string `json:"referenceMonth,omitempty"`
	// Type of the vehicle
	VehicleType *int32 `json:"vehicleType,omitempty"`
	// Fuel acronym (eg. G)
	FuelAcronym *string `json:"fuelAcronym,omitempty"`
}

// NewFipeResult instantiates a new FipeResult object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFipeResult() *FipeResult {
	this := FipeResult{}
	return &this
}

// NewFipeResultWithDefaults instantiates a new FipeResult object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFipeResultWithDefaults() *FipeResult {
	this := FipeResult{}
	return &this
}

// GetPrice returns the Price field value if set, zero value otherwise.
func (o *FipeResult) GetPrice() string {
	if o == nil || o.Price == nil {
		var ret string
		return ret
	}
	return *o.Price
}

// GetPriceOk returns a tuple with the Price field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FipeResult) GetPriceOk() (*string, bool) {
	if o == nil || o.Price == nil {
		return nil, false
	}
	return o.Price, true
}

// HasPrice returns a boolean if a field has been set.
func (o *FipeResult) HasPrice() bool {
	if o != nil && o.Price != nil {
		return true
	}

	return false
}

// SetPrice gets a reference to the given string and assigns it to the Price field.
func (o *FipeResult) SetPrice(v string) {
	o.Price = &v
}

// GetBrand returns the Brand field value if set, zero value otherwise.
func (o *FipeResult) GetBrand() string {
	if o == nil || o.Brand == nil {
		var ret string
		return ret
	}
	return *o.Brand
}

// GetBrandOk returns a tuple with the Brand field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FipeResult) GetBrandOk() (*string, bool) {
	if o == nil || o.Brand == nil {
		return nil, false
	}
	return o.Brand, true
}

// HasBrand returns a boolean if a field has been set.
func (o *FipeResult) HasBrand() bool {
	if o != nil && o.Brand != nil {
		return true
	}

	return false
}

// SetBrand gets a reference to the given string and assigns it to the Brand field.
func (o *FipeResult) SetBrand(v string) {
	o.Brand = &v
}

// GetModel returns the Model field value if set, zero value otherwise.
func (o *FipeResult) GetModel() string {
	if o == nil || o.Model == nil {
		var ret string
		return ret
	}
	return *o.Model
}

// GetModelOk returns a tuple with the Model field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FipeResult) GetModelOk() (*string, bool) {
	if o == nil || o.Model == nil {
		return nil, false
	}
	return o.Model, true
}

// HasModel returns a boolean if a field has been set.
func (o *FipeResult) HasModel() bool {
	if o != nil && o.Model != nil {
		return true
	}

	return false
}

// SetModel gets a reference to the given string and assigns it to the Model field.
func (o *FipeResult) SetModel(v string) {
	o.Model = &v
}

// GetModelYear returns the ModelYear field value if set, zero value otherwise.
func (o *FipeResult) GetModelYear() int32 {
	if o == nil || o.ModelYear == nil {
		var ret int32
		return ret
	}
	return *o.ModelYear
}

// GetModelYearOk returns a tuple with the ModelYear field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FipeResult) GetModelYearOk() (*int32, bool) {
	if o == nil || o.ModelYear == nil {
		return nil, false
	}
	return o.ModelYear, true
}

// HasModelYear returns a boolean if a field has been set.
func (o *FipeResult) HasModelYear() bool {
	if o != nil && o.ModelYear != nil {
		return true
	}

	return false
}

// SetModelYear gets a reference to the given int32 and assigns it to the ModelYear field.
func (o *FipeResult) SetModelYear(v int32) {
	o.ModelYear = &v
}

// GetFuel returns the Fuel field value if set, zero value otherwise.
func (o *FipeResult) GetFuel() string {
	if o == nil || o.Fuel == nil {
		var ret string
		return ret
	}
	return *o.Fuel
}

// GetFuelOk returns a tuple with the Fuel field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FipeResult) GetFuelOk() (*string, bool) {
	if o == nil || o.Fuel == nil {
		return nil, false
	}
	return o.Fuel, true
}

// HasFuel returns a boolean if a field has been set.
func (o *FipeResult) HasFuel() bool {
	if o != nil && o.Fuel != nil {
		return true
	}

	return false
}

// SetFuel gets a reference to the given string and assigns it to the Fuel field.
func (o *FipeResult) SetFuel(v string) {
	o.Fuel = &v
}

// GetCodeFipe returns the CodeFipe field value if set, zero value otherwise.
func (o *FipeResult) GetCodeFipe() string {
	if o == nil || o.CodeFipe == nil {
		var ret string
		return ret
	}
	return *o.CodeFipe
}

// GetCodeFipeOk returns a tuple with the CodeFipe field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FipeResult) GetCodeFipeOk() (*string, bool) {
	if o == nil || o.CodeFipe == nil {
		return nil, false
	}
	return o.CodeFipe, true
}

// HasCodeFipe returns a boolean if a field has been set.
func (o *FipeResult) HasCodeFipe() bool {
	if o != nil && o.CodeFipe != nil {
		return true
	}

	return false
}

// SetCodeFipe gets a reference to the given string and assigns it to the CodeFipe field.
func (o *FipeResult) SetCodeFipe(v string) {
	o.CodeFipe = &v
}

// GetReferenceMonth returns the ReferenceMonth field value if set, zero value otherwise.
func (o *FipeResult) GetReferenceMonth() string {
	if o == nil || o.ReferenceMonth == nil {
		var ret string
		return ret
	}
	return *o.ReferenceMonth
}

// GetReferenceMonthOk returns a tuple with the ReferenceMonth field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FipeResult) GetReferenceMonthOk() (*string, bool) {
	if o == nil || o.ReferenceMonth == nil {
		return nil, false
	}
	return o.ReferenceMonth, true
}

// HasReferenceMonth returns a boolean if a field has been set.
func (o *FipeResult) HasReferenceMonth() bool {
	if o != nil && o.ReferenceMonth != nil {
		return true
	}

	return false
}

// SetReferenceMonth gets a reference to the given string and assigns it to the ReferenceMonth field.
func (o *FipeResult) SetReferenceMonth(v string) {
	o.ReferenceMonth = &v
}

// GetVehicleType returns the VehicleType field value if set, zero value otherwise.
func (o *FipeResult) GetVehicleType() int32 {
	if o == nil || o.VehicleType == nil {
		var ret int32
		return ret
	}
	return *o.VehicleType
}

// GetVehicleTypeOk returns a tuple with the VehicleType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FipeResult) GetVehicleTypeOk() (*int32, bool) {
	if o == nil || o.VehicleType == nil {
		return nil, false
	}
	return o.VehicleType, true
}

// HasVehicleType returns a boolean if a field has been set.
func (o *FipeResult) HasVehicleType() bool {
	if o != nil && o.VehicleType != nil {
		return true
	}

	return false
}

// SetVehicleType gets a reference to the given int32 and assigns it to the VehicleType field.
func (o *FipeResult) SetVehicleType(v int32) {
	o.VehicleType = &v
}

// GetFuelAcronym returns the FuelAcronym field value if set, zero value otherwise.
func (o *FipeResult) GetFuelAcronym() string {
	if o == nil || o.FuelAcronym == nil {
		var ret string
		return ret
	}
	return *o.FuelAcronym
}

// GetFuelAcronymOk returns a tuple with the FuelAcronym field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FipeResult) GetFuelAcronymOk() (*string, bool) {
	if o == nil || o.FuelAcronym == nil {
		return nil, false
	}
	return o.FuelAcronym, true
}

// HasFuelAcronym returns a boolean if a field has been set.
func (o *FipeResult) HasFuelAcronym() bool {
	if o != nil && o.FuelAcronym != nil {
		return true
	}

	return false
}

// SetFuelAcronym gets a reference to the given string and assigns it to the FuelAcronym field.
func (o *FipeResult) SetFuelAcronym(v string) {
	o.FuelAcronym = &v
}

func (o FipeResult) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Price != nil {
		toSerialize["price"] = o.Price
	}
	if o.Brand != nil {
		toSerialize["brand"] = o.Brand
	}
	if o.Model != nil {
		toSerialize["model"] = o.Model
	}
	if o.ModelYear != nil {
		toSerialize["modelYear"] = o.ModelYear
	}
	if o.Fuel != nil {
		toSerialize["fuel"] = o.Fuel
	}
	if o.CodeFipe != nil {
		toSerialize["codeFipe"] = o.CodeFipe
	}
	if o.ReferenceMonth != nil {
		toSerialize["referenceMonth"] = o.ReferenceMonth
	}
	if o.VehicleType != nil {
		toSerialize["vehicleType"] = o.VehicleType
	}
	if o.FuelAcronym != nil {
		toSerialize["fuelAcronym"] = o.FuelAcronym
	}
	return json.Marshal(toSerialize)
}

type NullableFipeResult struct {
	value *FipeResult
	isSet bool
}

func (v NullableFipeResult) Get() *FipeResult {
	return v.value
}

func (v *NullableFipeResult) Set(val *FipeResult) {
	v.value = val
	v.isSet = true
}

func (v NullableFipeResult) IsSet() bool {
	return v.isSet
}

func (v *NullableFipeResult) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFipeResult(val *FipeResult) *NullableFipeResult {
	return &NullableFipeResult{value: val, isSet: true}
}

func (v NullableFipeResult) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFipeResult) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


